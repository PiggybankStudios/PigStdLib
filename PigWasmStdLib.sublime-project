{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns": [
				"musl_libc",
				"lib",
			],
			"file_exclude_patterns": [
				"test/combined.js",
				"build/*.js",
				"build/*.wasm",
			],
		},
		{
			"path": "lib/include/gylib",
			"name": "GyLib",
			"folder_exclude_patterns": [
				"std",
			],
		},
		{
			"path": "musl_libc",
			"name": "Musl Lib-C",
		}
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"CHAR_BIT",
			"CHAR_MAX",
			"CHAR_MIN",
			"CONDITIONAL_EXTERN_C",
			"CONDITIONAL_EXTERN_C_END",
			"CONDITIONAL_EXTERN_C_START",
			"DECIMAL_DIG",
			"EXP2F_N",
			"EXP2F_POLY_ORDER",
			"EXP2F_TABLE_BITS",
			"FP_INFINITE",
			"FP_NAN",
			"FP_NORMAL",
			"FP_SUBNORMAL",
			"FP_ZERO",
			"INFINITY",
			"INT16_MAX",
			"INT16_MIN",
			"INT32_MAX",
			"INT32_MIN",
			"INT64_MAX",
			"INT64_MIN",
			"INT8_MAX",
			"INT8_MIN",
			"INTMAX_MAX",
			"INTMAX_MIN",
			"INT_MAX",
			"INT_MIN",
			"LANGUAGE_C",
			"LANGUAGE_CPP",
			"LDBL_DIG",
			"LDBL_EPSILON",
			"LDBL_MANT_DIG",
			"LDBL_MAX",
			"LDBL_MAX_10_EXP",
			"LDBL_MAX_EXP",
			"LDBL_MIN",
			"LDBL_MIN_10_EXP",
			"LDBL_MIN_EXP",
			"LDBL_TRUE_MIN",
			"LLONG_MAX",
			"LLONG_MIN",
			"LONG_MAX",
			"LONG_MIN",
			"M_1_PI",
			"M_2_PI",
			"M_2_SQRTPI",
			"M_E",
			"M_LN10",
			"M_LN2",
			"M_LOG10E",
			"M_LOG2E",
			"M_PI",
			"M_PI_2",
			"M_PI_4",
			"M_SQRT1_2",
			"M_SQRT2",
			"NAN",
			"NULL",
			"PIG_WASM_STD_USE_BUILTINS_ASIN_ACOS_ATAN",
			"PIG_WASM_STD_USE_BUILTINS_CBRT",
			"PIG_WASM_STD_USE_BUILTINS_EXP",
			"PIG_WASM_STD_USE_BUILTINS_FABS",
			"PIG_WASM_STD_USE_BUILTINS_FLOOR_CEIL",
			"PIG_WASM_STD_USE_BUILTINS_FMIN_FMAX",
			"PIG_WASM_STD_USE_BUILTINS_FMOD",
			"PIG_WASM_STD_USE_BUILTINS_LDEXP",
			"PIG_WASM_STD_USE_BUILTINS_LOG",
			"PIG_WASM_STD_USE_BUILTINS_LOG10",
			"PIG_WASM_STD_USE_BUILTINS_LOG2",
			"PIG_WASM_STD_USE_BUILTINS_POW",
			"PIG_WASM_STD_USE_BUILTINS_SIN_COS_TAN",
			"PIG_WASM_STD_USE_BUILTINS_SQRT",
			"PIG_WASM_STD_USE_FMIN_FMAX_BUILTINS",
			"RAND_MAX",
			"SCHAR_MAX",
			"SCHAR_MIN",
			"SHRT_MAX",
			"SHRT_MIN",
			"SIG_ATOMIC_MAX",
			"SIG_ATOMIC_MIN",
			"STD_ASSERTIONS_DISABLED",
			"STD_ASSERTIONS_ENABLED",
			"TEST_INCLUDE_STD_LIBRARY",
			"UCHAR_MAX",
			"UINT16_MAX",
			"UINT32_MAX",
			"UINT64_MAX",
			"UINT8_MAX",
			"UINTMAX_MAX",
			"UINT_MAX",
			"ULLONG_MAX",
			"ULONG_MAX",
			"USHRT_MAX",
			"USING_PIG_WASM_STD_LIB",
			"WASM_COMPILATION",
			"WASM_IMPORTED_FUNC",
			"WASM_MEMORY_MAX_NUM_PAGES",
			"WASM_MEMORY_PAGE_SIZE",
			"WCHAR_MAX",
			"WCHAR_MIN",
			"_Addr",
			"_Int64",
			"_Reg",
			"__BYTE_ORDER",
			"__LONG_MAX",
			"exp2f_C",
			"exp2f_InvLn2N",
			"exp2f_SHIFT",
			"exp2f_T",
			"exp2inline_C",
			"exp2inline_SHIFT",
			"exp2inline_SIGN_BIAS",
			"exp2inline_T",
		],
		"custom_functions":
		[
			"#define EXTRACT_WORDS(highWord, lowWord, value)",
			"#define FORCE_EVAL(value)",
			"#define GET_FLOAT_WORD(wordVar, value)",
			"#define GET_HIGH_WORD(wordVar, value)",
			"#define GET_LOW_WORD(wordVar, value)",
			"#define INSERT_WORDS(doubleVar, highWord, lowWord)",
			"#define SET_FLOAT_WORD(floatVar, value)",
			"#define SET_HIGH_WORD(doubleVar, wordValue)",
			"#define SET_LOW_WORD(doubleVar, wordValue)",
			"#define TestCaseFloat(testCase, expectedValue)",
			"#define TestCaseInt(testCase, expectedValue)",
			"#define WASM_EXPORTED_FUNC(returnType, functionName, ...)",
			"#define asdouble(value)",
			"#define asfloat(value)",
			"#define assert(condition)",
			"#define asuint(value)",
			"#define asuint64(value)",
			"#define fpclassify(value)",
			"#define isinf(value)",
			"#define isnan(value)",
			"#define isnormal(value)",
			"#define offsetof(type, member)",
			"#define predict_false(condition)",
			"#define predict_true(condition)",
			"#define signbit(value)",
			"#define strstr_BITOP(a,b,op)",
			"StdAssertFailure(const char* filePath, int fileLineNum, const char* funcName, const char* conditionStr)",
			"async function PigWasm_Init(wasmMemory, initialMemPageCount, wasmFilePath, appApiFuncs)",
			"char* strstr(const char* haystack, const char* needle)",
			"double __math_divzero(uint32_t sign)",
			"double __math_invalid(double value)",
			"double acos(double value)",
			"double asin(double value)",
			"double atan(double value)",
			"double atan2(double numer, double denom)",
			"double atof(const char* str)",
			"double cbrt(double value)",
			"double ceil(double value)",
			"double copysign(double magnitude, double sign)",
			"double cos(double value)",
			"double exp(double value)",
			"double fabs(double value)",
			"double floor(double value)",
			"double fmax(double value1, double value2)",
			"double fmin(double value1, double value2)",
			"double fmod(double numer, double denom)",
			"double fp_barrier(double x)",
			"double ldexp(double value, int exponent)",
			"double log(double value)",
			"double log10(double value)",
			"double log2(double value)",
			"double pow(double value, double exponent)",
			"double round(double value)",
			"double scalbn(double value, int power)",
			"double sin(double value)",
			"double sqrt(double value)",
			"double tan(double value)",
			"float  acosf(float value)",
			"float  asinf(float value)",
			"float  atan2f(float numer, float denom)",
			"float  atanf(float value)",
			"float  cbrtf(float value)",
			"float  ceilf(float value)",
			"float  copysignf(float magnitude, float sign)",
			"float  cosf(float value)",
			"float  expf(float value)",
			"float  fabsf(float value)",
			"float  floorf(float value)",
			"float  fmaxf(float value1, float value2)",
			"float  fminf(float value1, float value2)",
			"float  fmodf(float numer, float denom)",
			"float  ldexpf(float value, int exponent)",
			"float  log10f(float value)",
			"float  log2f(float value)",
			"float  logf(float value)",
			"float  powf(float value, float exponent)",
			"float  roundf(float value)",
			"float  scalbnf(float value, int power)",
			"float  sinf(float value)",
			"float  sqrtf(float value)",
			"float  tanf(float value)",
			"float __math_invalidf(float value)",
			"function PigWasm_AcquireCanvas(canvasWidth, canvasHeight)",
			"function PigWasm_CreateGlContext(canvas)",
			"function PigWasm_InitMemory(initialMemPageCount)",
			"inline double eval_as_double(double x)",
			"inline float eval_as_float(float x)",
			"inline int __flt_rounds()",
			"int __fpclassify(double value)",
			"int __fpclassifyf(float value)",
			"int abs(int value)",
			"int memcmp(const void* left, const void* right, size_t numBytes)",
			"int rand()",
			"int strcmp(const char* left, const char* right)",
			"int strncmp(const char* left, const char* right, size_t numBytes)",
			"long double copysignl(long double magnitude, long double sign)",
			"long double fabsl(long double value)",
			"long double fmodl(long double numer, long double denom)",
			"long double scalbnl(long double value, int power)",
			"size_t strlen(const char* str)",
			"size_t wcslen(const wchar_t* str)",
			"uint32_t top12(double value)",
			"uint32_t top16(double x)",
			"unsigned __FLOAT_BITS(float value)",
			"unsigned long long __DOUBLE_BITS(double value)",
			"void InitWasmMemory(uint32_t numInitialPages)",
			"void RunStringTestCases()",
			"void fp_force_eval(double value)",
			"void fp_force_evalf(float value)",
			"void free(void* allocPntr)",
			"void jsStdAbort(const char* messageStrPntr)",
			"void jsStdAssertFailure(const char* filePathPntr, int fileLineNum, const char* funcNamePntr, const char* messageStrPntr)",
			"void jsStdGrowMemory(unsigned int numPages)",
			"void qsort(void* basePntr, size_t numItems, size_t itemSize, CompareFunc_f* compareFunc)",
			"void srand(unsigned int seed)",
			"void* WasmMemoryAllocate(uint32_t numBytes)",
			"void* aligned_alloc(size_t numBytes, size_t alignmentSize)",
			"void* alloca(size_t numBytes)",
			"void* calloc(size_t numElements, size_t elemSize)",
			"void* malloc(size_t numBytes)",
			"void* memcpy(void* dest, const void* source, size_t numBytes)",
			"void* memmove(void* dest, const void* source, size_t numBytes)",
			"void* memset(void* pntr, int value, size_t numBytes)",
			"void* realloc(void* prevAllocPntr, size_t newSize)",
			"void* strcpy(void* dest, const void* source)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"CompareFunc_f",
			"File_t",
			"IoFile_t",
			"double_t",
			"float_t",
			"int16_t",
			"int32_t",
			"int64_t",
			"int8_t",
			"intmax_t",
			"intptr_t",
			"ldshape",
			"off_t",
			"ptrdiff_t",
			"size_t",
			"ssize_t",
			"u_int64_t",
			"uint16_t",
			"uint32_t",
			"uint64_t",
			"uint8_t",
			"uintmax_t",
			"uintptr_t",
			"wchar_t",
		],
	},
}
